#write.csv(station, file = "result_r_station.csv")
biens[biens=="ALEXANDRE DUMAS"]<-"ALEXANDRE-DUMAS"
biens[biens=="AVENUE HENRI MARTIN"]<-"OCTAVE FEUILLET"
biens[biens=="BUTTES CHAUMONT"]<-"BUTTES-CHAUMONT"
biens[biens=="CHAMPS-ELYSEES - CLEMENCEAU (GRAND PALAIS)"]<-"CHAMPS-ELYSEES - CLEMENCEAU"
biens[biens=="CHATEAU-LANDON"]<-"CHATEAU LANDON"
biens[biens=="CHATELET - LES HALLES"]<-"CHATELET-LES HALLES"
biens[biens=="CLUNY - LA SORBONNE"]<-"CLUNY-LA SORBONNE"
biens[biens=="CORENTIN CARIOU"]<-"CORENTIN-CARIOU"
biens[biens=="FRANKLIN D. ROOSEVELT"]<-"FRANKLIN-ROOSEVELT"
biens[biens=="GONCOURT (HOPITAL-SAINT-LOUIS)"]<-"GONCOURT (HOPITAL SAINT-LOUIS)"
biens[biens=="HOPITAL ROBERT-DEBRE"]<-"HOPITAL ROBERT DEBRE"
biens[biens=="JAVEL - ANDRE CITROEN"]<-"JAVEL-ANDRE-CITROEN"
biens[biens=="LA MOTTE-PICQUET - GRENELLE"]<-"LA MOTTE-PICQUET-GRENELLE"
biens[biens=="MAGENTA"]<-"LA FAYETTE - DUNKERQUE"
biens[biens=="MARX DORMOY"]<-"MARX-DORMOY"
biens[biens=="NEUILLY - PORTE MAILLOT"]<-"PORTE MAILLOT - PALAIS DES CONGRES"
biens[biens=="NOTRE-DAME-DE-LORETTE"]<-"NOTRE-DAME DE LORETTE"
biens[biens=="PEREIRE - LEVALLOIS"]<-"PEREIRE"
biens[biens=="PEREIRE (MARECHAL JUIN)"]<-"PEREIRE - MARECHAL JUIN"
biens[biens=="PLACE MONGE (JARDIN DES PLANTES - ARENES DE LUTECE)"]<-"PLACE MONGE (JARDIN DES PLANTES)"
biens[biens=="PONT-CARDINET"]<-"PONT CARDINET"
biens[biens=="PONT DE L'ALMA"]<-"BOSQUET - RAPP"
biens[biens=="PORTE DE PANTIN (PARC DE LA VILLETTE)"]<-"PORTE DE PANTIN - PARC DE LA VILLETTE"
biens[biens=="PORTE DE SAINT-CLOUD (PARC DES PRINCES)"]<-"PORTE DE SAINT-CLOUD"
biens[biens=="PORTE DE VERSAILLES (PARC DES EXPOSITIONS DE PARIS)"]<-"PORTE DE VERSAILLES - PARC DES EXPOSITIONS"
biens[biens=="PORTE MAILLOT (PALAIS DES CONGRES)"]<-"PORTE MAILLOT - PALAIS DES CONGRES"
biens[biens=="SAINT-SEBASTIEN - FROISSART"]<-"SAINT-SEBASTIEN-FROISSART"
biens[biens=="SOLFERINO (MUSEE D'ORSAY)"]<-"SOLFERINO - BELLECHASSE"
biens[biens=="STADE CHARLETY"]<-"STADE CHARLETY - PORTE DE GENTILLY"
biens[biens=="TELEGRAPHE"]<-"PELLEPORT - BELLEVILLE"
transport<-unique(c(biens$transport.0,biens$transport.1,biens$transport.2))
sort(setdiff(transport,unique(station$Name)))
# On intègre les coordonnées GPS des stations de l'annonce à notre data.frame biens
colnames(station)[1]<-"transport.0"
transport0<-merge(biens,station, by="transport.0")
transport0<-transport0[order(transport0$transport.0),]
colnames(station)[1]<-"transport.1"
transport1<-merge(biens,station, by="transport.1")
transport1<-transport1[order(transport1$transport.0),]
colnames(station)[1]<-"transport.2"
transport2<-merge(biens,station, by="transport.2")
transport2<-transport2[order(transport2$transport.0),]
biens<-biens[order(biens$transport.0),]
biens<-cbind(biens,Latitude_transport.0=transport0$latitude,Longitude_transport.0=transport0$longitude,Latitude_transport.1=transport1$latitude,Longitude_transport.1=transport1$longitude,Latitude_transport.2=transport2$latitude,Longitude_transport.2=transport2$longitude)
#On intègre les distances des biens aux stations de métro/RER référencées dans l'annonce
dist_metro0=c()
dist_metro1=c()
dist_metro2=c()
for (i in seq(1, length(biens$code.postal))){
dist_metro0=c(dist_metro0,distHaversine(c(biens$lon[i],biens$lat[i]),c(biens$Longitude_transport.0[i],biens$Latitude_transport.0[i]), r=6378137))
}
distHaversine(c(2.270395,48.86509),c(2.269568,48.86309))
for (i in seq(1, length(biens$code.postal))){
dist_metro1=c(dist_metro1,distHaversine(c(biens$lon[i],biens$lat[i]),c(biens$Longitude_transport.1[i],biens$Latitude_transport.1[i]), r=6378137))
}
for (i in seq(1, length(biens$code.postal))){
dist_metro2=c(dist_metro2,distHaversine(c(biens$lon[i],biens$lat[i]),c(biens$Longitude_transport.2[i],biens$Latitude_transport.2[i]), r=6378137))
}
dist_metro<-data.frame(dist_metro0,dist_metro1,dist_metro2)
colnames(dist_metro)<-c("distance_station_0","distance_station_1","distance_station_2")
biens<- cbind(biens,dist_metro)
# On calcule la distance des biens à ces 11 monuments.
monument<-read.csv("../../Datasets/monuments_paris.csv",header= T,sep=",",encoding = "UTF-8")
mon=c()
dist_monu=data.frame()
for (i in seq(1, length(biens$code.postal))){
mon=c()
for (c in seq(1, length(monument$Nom))){
mon=c(mon,distHaversine(c(biens$lon[i],biens$lat[i]), c(monument$Longitude[c],monument$Latitude[c]), r=6378137))
}
dist_monu<-rbind(dist_monu,mon)
}
colnames(dist_monu)<-monument$Nom
biens<- cbind(biens,dist_monu)
# Lecture du fichier
universite<-read.csv("../../Datasets/université_paris.csv",header= T,sep=",",encoding = "UTF-8")
# Calcule de la distance du bien pour chaque université puis sélection du minimum pour garder la distance à l'université la plus proche
dist_uni=rep(0,124)
for (i in seq(1, length(biens$code.postal))){
v=rep(0,7)
for (c in seq(1, length(universite$Nom))){
v[c]=distHaversine(c(biens$lon[i],biens$lat[i]), c(universite$Longitude[c],universite$Latitude[c]), r=6378137)
}
dist_uni[i]=min(v)
}
biens<-cbind(biens,distance_université_plus_près=dist_uni)
#On considère que les types "pièce" et "chambre" reflètent la même information, on associe "pièce" à "chambre"
biens[biens=="pièce"]<-"chambre"
#On rajoute quatres colonnes à gauche pour mettre la variable "type" qui est qualitative en 4 variable binaire
app=c()
stu=c()
mai=c()
cha=c()
for (i in seq(1, length(biens$code.postal))){
if(biens$type[i]=="appartement") {app=c(app,1)} else {app=c(app,0)}
if(biens$type[i]=="studio") {stu=c(stu,1)} else {stu=c(stu,0)}
if(biens$type[i]=="maison") {mai=c(mai,1)} else {mai=c(mai,0)}
if(biens$type[i]=="chambre") {cha=c(cha,1)} else {cha=c(cha,0)}
}
biens<-cbind(appartement=app,studio=stu,maison=mai,chambre=cha,biens)
#On choisit de mettre 0 lorsque le bien est dans l'hyper-centre et 1 sinon (i.e. 0 du 1er au onzième arrondissement)
arr=c()
for (i in seq(1, length(biens$code.postal))){
if(as.numeric(str_sub(biens$code.postal[i],-2))<12) {arr=c(arr,0)} else {arr=c(arr,1)}
}
biens<-cbind(biens,arrondissement=arr)
View(biens)
#On considère que les types "pièce" et "chambre" reflètent la même information, on associe "pièce" à "chambre"
biens[biens=="pièce"]<-"chambre"
#On rajoute quatres colonnes à gauche pour mettre la variable "type" qui est qualitative en 4 variable binaire
app=c()
stu=c()
mai=c()
cha=c()
for (i in seq(1, length(biens$code.postal))){
if(biens$type[i]=="appartement") {app=c(app,1)} else {app=c(app,0)}
if(biens$type[i]=="studio") {stu=c(stu,1)} else {stu=c(stu,0)}
if(biens$type[i]=="maison") {mai=c(mai,1)} else {mai=c(mai,0)}
if(biens$type[i]=="chambre") {cha=c(cha,1)} else {cha=c(cha,0)}
}
biens<-cbind(appartement=app,studio=stu,maison=mai,chambre=cha,biens)
#On choisit de mettre 0 lorsque le bien est dans l'hyper-centre et 1 sinon (i.e. 0 du 1er au onzième arrondissement)
arr=c()
for (i in seq(1, length(biens$code.postal))){
if(as.numeric(str_sub(biens$code.postal[i],-2))<12) {arr=c(arr,0)} else {arr=c(arr,1)}
}
biens<-cbind(biens,arrondissement=arr)
View(biens)
View(biens)
write.table(x = biens, file = "dataviz.csv")
write.table(x = biens, file = "dataviz.csv")
write.table(x = biens, file = "dataviz.csv")
write.csv(x = biens, file = "dataviz.csv")
View(biens)
View(biens)
biens %>% select(-appartement)
biens %>% select((-appartement))
biens %>% mutate(apparement = NULL)
biens %>% mutate(arrondissement = NULL)
View(biens)
biens = biens %>% mutate(arrondissement = NULL)
biens = biens %>% mutate(arrondissement.name_repair = NULL)
biens = biens %>% mutate(arrondissement = NULL,.name_repair)
write.csv(x = biens, file = "dataviz.csv")
biens = biens %>% mutate(arrondissement = NULL,.name_repair='minimal')
biens
biens[,-1]
View(biens)
biens[,-1]
biens[,-c(1:40)]
biens[,-c(1:3)]
View(biens)
View(biens)
biens[,-c(1:5)]
biens=biens[,-c(1:4)]
View(biens)
biens %>% mutate(appartement=NULL)
biens[,-length(biens)]
biens[,length(biens)]
length(biens)
biens[,-40]
biens=biens[,-c(1:4,-40)]
biens=biens[,-c(1:4,40)]
View(biens)
View(biens)
biens %>% mutate(appartement=NULL)
biens %>% mutate(arrondissement=NULL)
View(biens)
bien2=biens %>% mutate(arrondissement=NULL)
View(bien2)
write.csv(x = biens, file = "dataviz.csv")
write.csv(x = bien2, file = "dataviz.csv")
write.table(x = bien2, file = "dataviz.csv")
install.packages("shiny")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
install.packages("DT")
install.packages("shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD')
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD')
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
install.packages("DataExplorer")
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
donnee=biens2
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
donnee=biens2
View(bien2)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
donnee=bien2
#Utilisation de Data Explorer
introduce(donnee)
#Utilisation de Data Explorer
print(introduce(donnee))
intro
#Utilisation de Data Explorer
intro=introduce(donnee)
intro
print(intro)
View(intro)
View(intro)
View(intro)
#Utilisation de Data Explorer
intro=introduce(donnee)
View(intro)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
# params$title
donnee=bien2
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(tidyverse)
# params$mesdata
# params$title
donnee=read_csv('./datavizfin.csv')
#Utilisation de Data Explorer
intro=introduce(donnee)
intro
#Utilisation de Data Explorer
intro=introduce(donnee)
plot_intro(donnee)
plot_missing(final_data)
plot_missing(final_data)
#Utilisation de Data Explorer
intro=introduce(donnee)
plot_intro(donnee)
plot_missing(donnee)
View(intro)
eval=logical(intro$rows-intro$complete_rows)
eval
eval=logical(1)
eval
eval=logical(0)
eval
eval=logical(2)
eval
eval=as.logical(intro$rows-intro$complete_rows)
eval
eval=as.logical(1)
eval
plot_bar(final_data)
plot_bar(donnee)
Barplot=plot_bar(donnee)
View(Barplot)
View(Barplot)
Barplot=plot_bar(final_data, with = "prix")
Barplot=plot_bar(donnee, with = "prix")
View(biens)
Barplot=plot_bar(donnee, with = "nb_photo")
Barplot=plot_bar(donnee, with = "prix")
Barplot=plot_bar(donnee, with = "surface")
colnames(donnee)
colnames(donnee)[34]
Barplot=plot_bar(donnee, with = colnames(donnee)[34])
Barplot=plot_bar(donnee)
Histo=plot_histogram(donnee)
colnames(donnee)
colnames(donnee)
qq_data <- donnee
plot_qq(qq_data, sampled_rows = 1000L)
plot_qq(qq_data, by = "surface", sampled_rows = 1000L)
plot_qq(qq_data, by = "type", sampled_rows = 1000L)
plot_correlation(na.omit(donnee), maxcat = 5L)
plot_correlation(donnee, maxcat = 5L)
plot_correlation(donnee, maxcat = 10L)
plot_correlation(donnee)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(DataExplorer)
library(tidyverse)
# params$mesdata
# params$title
donnee=read_csv('./datavizfin.csv')
colnames(donnee)
qq_data <- donnee
plot_qq(qq_data, sampled_rows = 1000L)
corr=plot_correlation(donnee)
View(corr)
corr.data$value
corr$data.value
corr.data.value
corr.data
corr$data
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()+scale_color_gradient(low="blue", high="red")
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()+scale_color_gradient(low="black", high="red")
plot(corr)
corr=plot_correlation(donnee)
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()+scale_color_gradient(low="black", high="red")
View(bien2)
View(donnee)
summarise(donnee)
summarise(donnee)
sapply(donnee, class)
coltypes=sapply(donnee, class)
coltypes!="numeric"
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
View(pca_df)
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
# params$mesdata
# params$title
donnee=read_csv('./datavizfin.csv')
coltypes=sapply(donnee, class)
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
coltypes!="numeric"
donnee[, -c(coltypes!="numeric")]
pca_df <- na.omit(donnee[, -c(coltypes!="numeric")])
View(pca_df)
coltypes=sapply(donnee, class)
coltypes!="numeric"
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
View(pca_df)
(coltypes!="numeric")
(coltypes!="numeric")
pca_df <- na.omit(donnee[, -as.vector(coltypes!="numeric")])
pca_df <- na.omit(donnee[, -as.vector(coltypes!="numeric")])
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
pca_df <- na.omit(donnee[, -c(coltypes!="numeric")])
donnee[, -(coltypes!="numeric")]
(coltypes!="numeric")
donnee[, (coltypes!="numeric")]
donnee[, -(coltypes!="numeric")]
coltypes=sapply(donnee, class)
coltypes
donnee %>% mutate((coltypes!="numeric")=NULL)
donnee %>% mutate((coltypes!="numeric")NULL)
donnee %>% mutate((coltypes!="numeric"))
coltypes[(coltypes!="numeric")]
coltypes=sapply(donnee, class)[(sapply(donnee, class)!="numeric")]
donnee %>% mutate(coltypes=NULL)
coltypes=colnames(donnee)[(sapply(donnee, class)!="numeric")]
donnee %>% mutate(coltypes=NULL)
donnee %>% mutate(coltypes=NULL)
dat=donnee %>% mutate(coltypes=NULL)
dat=donnee %>% select(-coltypes)
dat=donnee %>% select(-all_of(coltypes))
dat=donnee %>% select(-all_of(coltypes))
View(dat)
dat=donnee %>% select(-all_of(colnames(donnee)[(sapply(donnee, class)!="numeric")]))
pca_df <- na.omit(dat)
dat=donnee %>% select(-all_of(colnames(donnee)[(sapply(donnee, class)!="numeric")]))
plot_prcomp( na.omit(dat), variance_cap = 0.9, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 1, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 0.95, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 0.82, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 0.8, nrow = 2L, ncol = 2L)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(DataExplorer)
library(tidyverse)
# read_csv('./datavizfin.csv')
# params$title
donnee=params$mesdata
plot_boxplot(donnee, by = "type")
plot_boxplot(donnee)
plot_scatterplot(donnee, by = "type", sampled_rows = 1000L)
qqp=plot_qq(qq_data, sampled_rows = 1000L)
View(qqp)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
install.packages("roxygen2")
install.packages("roxygen2")
install.packages('rsconnect')
runApp('Shiny',port=1234)
# Création de différents modèles à inclure dans le rapport
library(shiny)
runApp('Shiny',port=1234)
runApp('Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny')
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=FALSE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=params$mesdata
airquality
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
NomsModeles=names(params$mesmodeles)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
install.packages("rpart")
install.packages("caret")
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
# Création de différents modèles à inclure dans le rapport
library(shiny)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
install.packages("leaflet")
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
if (!(require(jsonlite))) install.packages("jsonlite")
if (!(require(jsonlite))) install.packages("jsonlite")
geocodeGratuit <- function(adresses){
# adresses est un vecteur contenant toutes les adresses sous forme de chaine de caracteres
nominatim_osm <- function(address = NULL){
## details: http://wiki.openstreetmap.org/wiki/Nominatim
## fonction nominatim_osm proposée par D.Kisler
if(suppressWarnings(is.null(address)))  return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(c(as.numeric(d$lon), as.numeric(d$lat)))
}
tableau <- t(sapply(adresses,nominatim_osm))
colnames(tableau) <- c("lon","lat")
return(tableau)
}
Paris <- geocodeGratuit("paris")
Paris <- geocodeGratuit("paris")
m2 <- leaflet() %>% setView(lng = Paris[1], lat = Paris[2], zoom = 12) %>%
addTiles()
m2 %>% addProviderTiles("Stamen.Toner")
m2 %>% addProviderTiles("OpenStreetMap.BlackAndWhite")
m2 %>% addProviderTiles("Thunderforest.Transport")
m2 %>% addProviderTiles(providers$CartoDB.Positron)
View(Paris)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
corr.mat1<-cor.matrix(donnee,test=cor.test)
install.packages("ggcorrplot")
corrmat1<-cor(donnee,"pearson")
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=TRUE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=read_csv('./datavizfin.csv')
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=TRUE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=read_csv('../datavizfin.csv')
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=TRUE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=read_csv('../DataViz.csv')
# donnee=params$mesdata
#
#Dans tout les Chunks incProgress indique la progression à l'utilisateur
incProgress(1/10,message = 'Création de la matrice des corrélations', detail = 'kniting')
#Dans tout les Chunks incProgress indique la progression à l'utilisateur
# incProgress(1/10,message = 'Création de la matrice des corrélations', detail = 'kniting')
corrmat1<-cor(donnee,"pearson")
corrmat1<-cor(donnee,"pearson")
#Dans tout les Chunks incProgress indique la progression à l'utilisateur
# incProgress(1/10,message = 'Création de la matrice des corrélations', detail = 'kniting')
corrmat1<-cor(donnee,"pearson")
donnee2=donne %>% select_if(is.numeric)
donnee2=donnee %>% select_if(is.numeric)
View(donnee2)
corrmat1<-cor(donnee2,"pearson")
corrmat1<-cor(donnee2)
corrmat1<-cor(donnee2)
ggcorplot(corr.mat1,data = donnee)
ggcorplot(corrmat1,data = donnee)
ggcorplot(corrmat1,data = donnee)
View(corrmat1)
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny')
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles(urlTemplate = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png") %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=123)
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
