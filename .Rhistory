write.csv(x = biens, file = "dataviz.csv")
View(biens)
View(biens)
biens %>% select(-appartement)
biens %>% select((-appartement))
biens %>% mutate(apparement = NULL)
biens %>% mutate(arrondissement = NULL)
View(biens)
biens = biens %>% mutate(arrondissement = NULL)
biens = biens %>% mutate(arrondissement.name_repair = NULL)
biens = biens %>% mutate(arrondissement = NULL,.name_repair)
write.csv(x = biens, file = "dataviz.csv")
biens = biens %>% mutate(arrondissement = NULL,.name_repair='minimal')
biens
biens[,-1]
View(biens)
biens[,-1]
biens[,-c(1:40)]
biens[,-c(1:3)]
View(biens)
View(biens)
biens[,-c(1:5)]
biens=biens[,-c(1:4)]
View(biens)
biens %>% mutate(appartement=NULL)
biens[,-length(biens)]
biens[,length(biens)]
length(biens)
biens[,-40]
biens=biens[,-c(1:4,-40)]
biens=biens[,-c(1:4,40)]
View(biens)
View(biens)
biens %>% mutate(appartement=NULL)
biens %>% mutate(arrondissement=NULL)
View(biens)
bien2=biens %>% mutate(arrondissement=NULL)
View(bien2)
write.csv(x = biens, file = "dataviz.csv")
write.csv(x = bien2, file = "dataviz.csv")
write.table(x = bien2, file = "dataviz.csv")
install.packages("shiny")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
install.packages("DT")
install.packages("shiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD')
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD')
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
install.packages("DataExplorer")
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
donnee=biens2
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
donnee=biens2
View(bien2)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
donnee=bien2
#Utilisation de Data Explorer
introduce(donnee)
#Utilisation de Data Explorer
print(introduce(donnee))
intro
#Utilisation de Data Explorer
intro=introduce(donnee)
intro
print(intro)
View(intro)
View(intro)
View(intro)
#Utilisation de Data Explorer
intro=introduce(donnee)
View(intro)
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
# params$mesdata
# params$title
donnee=bien2
knitr::opts_chunk$set(echo = FALSE)
library(DataExplorer)
library(tidyverse)
# params$mesdata
# params$title
donnee=read_csv('./datavizfin.csv')
#Utilisation de Data Explorer
intro=introduce(donnee)
intro
#Utilisation de Data Explorer
intro=introduce(donnee)
plot_intro(donnee)
plot_missing(final_data)
plot_missing(final_data)
#Utilisation de Data Explorer
intro=introduce(donnee)
plot_intro(donnee)
plot_missing(donnee)
View(intro)
eval=logical(intro$rows-intro$complete_rows)
eval
eval=logical(1)
eval
eval=logical(0)
eval
eval=logical(2)
eval
eval=as.logical(intro$rows-intro$complete_rows)
eval
eval=as.logical(1)
eval
plot_bar(final_data)
plot_bar(donnee)
Barplot=plot_bar(donnee)
View(Barplot)
View(Barplot)
Barplot=plot_bar(final_data, with = "prix")
Barplot=plot_bar(donnee, with = "prix")
View(biens)
Barplot=plot_bar(donnee, with = "nb_photo")
Barplot=plot_bar(donnee, with = "prix")
Barplot=plot_bar(donnee, with = "surface")
colnames(donnee)
colnames(donnee)[34]
Barplot=plot_bar(donnee, with = colnames(donnee)[34])
Barplot=plot_bar(donnee)
Histo=plot_histogram(donnee)
colnames(donnee)
colnames(donnee)
qq_data <- donnee
plot_qq(qq_data, sampled_rows = 1000L)
plot_qq(qq_data, by = "surface", sampled_rows = 1000L)
plot_qq(qq_data, by = "type", sampled_rows = 1000L)
plot_correlation(na.omit(donnee), maxcat = 5L)
plot_correlation(donnee, maxcat = 5L)
plot_correlation(donnee, maxcat = 10L)
plot_correlation(donnee)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(DataExplorer)
library(tidyverse)
# params$mesdata
# params$title
donnee=read_csv('./datavizfin.csv')
colnames(donnee)
qq_data <- donnee
plot_qq(qq_data, sampled_rows = 1000L)
corr=plot_correlation(donnee)
View(corr)
corr.data$value
corr$data.value
corr.data.value
corr.data
corr$data
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()+scale_color_gradient(low="blue", high="red")
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()+scale_color_gradient(low="black", high="red")
plot(corr)
corr=plot_correlation(donnee)
corr$data %>% ggplot()+aes(x = Var1,y = Var2,color=value)+geom_point()+scale_color_gradient(low="black", high="red")
View(bien2)
View(donnee)
summarise(donnee)
summarise(donnee)
sapply(donnee, class)
coltypes=sapply(donnee, class)
coltypes!="numeric"
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
View(pca_df)
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
# params$mesdata
# params$title
donnee=read_csv('./datavizfin.csv')
coltypes=sapply(donnee, class)
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
coltypes!="numeric"
donnee[, -c(coltypes!="numeric")]
pca_df <- na.omit(donnee[, -c(coltypes!="numeric")])
View(pca_df)
coltypes=sapply(donnee, class)
coltypes!="numeric"
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
View(pca_df)
(coltypes!="numeric")
(coltypes!="numeric")
pca_df <- na.omit(donnee[, -as.vector(coltypes!="numeric")])
pca_df <- na.omit(donnee[, -as.vector(coltypes!="numeric")])
pca_df <- na.omit(donnee[, -(coltypes!="numeric")])
pca_df <- na.omit(donnee[, -c(coltypes!="numeric")])
donnee[, -(coltypes!="numeric")]
(coltypes!="numeric")
donnee[, (coltypes!="numeric")]
donnee[, -(coltypes!="numeric")]
coltypes=sapply(donnee, class)
coltypes
donnee %>% mutate((coltypes!="numeric")=NULL)
donnee %>% mutate((coltypes!="numeric")NULL)
donnee %>% mutate((coltypes!="numeric"))
coltypes[(coltypes!="numeric")]
coltypes=sapply(donnee, class)[(sapply(donnee, class)!="numeric")]
donnee %>% mutate(coltypes=NULL)
coltypes=colnames(donnee)[(sapply(donnee, class)!="numeric")]
donnee %>% mutate(coltypes=NULL)
donnee %>% mutate(coltypes=NULL)
dat=donnee %>% mutate(coltypes=NULL)
dat=donnee %>% select(-coltypes)
dat=donnee %>% select(-all_of(coltypes))
dat=donnee %>% select(-all_of(coltypes))
View(dat)
dat=donnee %>% select(-all_of(colnames(donnee)[(sapply(donnee, class)!="numeric")]))
pca_df <- na.omit(dat)
dat=donnee %>% select(-all_of(colnames(donnee)[(sapply(donnee, class)!="numeric")]))
plot_prcomp( na.omit(dat), variance_cap = 0.9, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 1, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 0.95, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 0.82, nrow = 2L, ncol = 2L)
plot_prcomp( na.omit(dat), variance_cap = 0.8, nrow = 2L, ncol = 2L)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(DataExplorer)
library(tidyverse)
# read_csv('./datavizfin.csv')
# params$title
donnee=params$mesdata
plot_boxplot(donnee, by = "type")
plot_boxplot(donnee)
plot_scatterplot(donnee, by = "type", sampled_rows = 1000L)
qqp=plot_qq(qq_data, sampled_rows = 1000L)
View(qqp)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App',port=1234)
shiny::runApp('Documents/School/S2/Data Viz/Projet/App_LGD/App')
install.packages("roxygen2")
install.packages("roxygen2")
install.packages('rsconnect')
runApp('Shiny',port=1234)
# Création de différents modèles à inclure dans le rapport
library(shiny)
runApp('Shiny',port=1234)
runApp('Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny')
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=FALSE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=params$mesdata
airquality
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
NomsModeles=names(params$mesmodeles)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
install.packages("rpart")
install.packages("caret")
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
# Création de différents modèles à inclure dans le rapport
library(shiny)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
install.packages("leaflet")
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
if (!(require(jsonlite))) install.packages("jsonlite")
if (!(require(jsonlite))) install.packages("jsonlite")
geocodeGratuit <- function(adresses){
# adresses est un vecteur contenant toutes les adresses sous forme de chaine de caracteres
nominatim_osm <- function(address = NULL){
## details: http://wiki.openstreetmap.org/wiki/Nominatim
## fonction nominatim_osm proposée par D.Kisler
if(suppressWarnings(is.null(address)))  return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(c(as.numeric(d$lon), as.numeric(d$lat)))
}
tableau <- t(sapply(adresses,nominatim_osm))
colnames(tableau) <- c("lon","lat")
return(tableau)
}
Paris <- geocodeGratuit("paris")
Paris <- geocodeGratuit("paris")
m2 <- leaflet() %>% setView(lng = Paris[1], lat = Paris[2], zoom = 12) %>%
addTiles()
m2 %>% addProviderTiles("Stamen.Toner")
m2 %>% addProviderTiles("OpenStreetMap.BlackAndWhite")
m2 %>% addProviderTiles("Thunderforest.Transport")
m2 %>% addProviderTiles(providers$CartoDB.Positron)
View(Paris)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
corr.mat1<-cor.matrix(donnee,test=cor.test)
install.packages("ggcorrplot")
corrmat1<-cor(donnee,"pearson")
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=TRUE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=read_csv('./datavizfin.csv')
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=TRUE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=read_csv('../datavizfin.csv')
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,eval=TRUE)
library(DataExplorer)
library(tidyverse)
#
# params$title
# read_delim('/home/pierre/Documents/School/S2/Data Viz/Tuto2/tauxchomage.csv',';')
donnee=read_csv('../DataViz.csv')
# donnee=params$mesdata
#
#Dans tout les Chunks incProgress indique la progression à l'utilisateur
incProgress(1/10,message = 'Création de la matrice des corrélations', detail = 'kniting')
#Dans tout les Chunks incProgress indique la progression à l'utilisateur
# incProgress(1/10,message = 'Création de la matrice des corrélations', detail = 'kniting')
corrmat1<-cor(donnee,"pearson")
corrmat1<-cor(donnee,"pearson")
#Dans tout les Chunks incProgress indique la progression à l'utilisateur
# incProgress(1/10,message = 'Création de la matrice des corrélations', detail = 'kniting')
corrmat1<-cor(donnee,"pearson")
donnee2=donne %>% select_if(is.numeric)
donnee2=donnee %>% select_if(is.numeric)
View(donnee2)
corrmat1<-cor(donnee2,"pearson")
corrmat1<-cor(donnee2)
corrmat1<-cor(donnee2)
ggcorplot(corr.mat1,data = donnee)
ggcorplot(corrmat1,data = donnee)
ggcorplot(corrmat1,data = donnee)
View(corrmat1)
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny')
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles(urlTemplate = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png") %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
shiny::runApp('Documents/School/S2/Data Viz/VISU/Shiny',port=1234)
donnee=read_csv('../DataViz.csv')
setwd("~/Documents/School/S2/Data Viz/VISU")
donnee=read_csv('../DataViz.csv')
donnee=read_csv('./DataViz.csv')
View(donnee)
colnames(donnee)
vect_name=colnames(donnee) %>% select(1)
vect_name=colnames(donnee)
vect_name=colnames(donnee)[1,2]
vect_name=colnames(donnee)[c(1,2,3)]
source('~/Documents/School/S2/Data Viz/VISU/test.R', echo=TRUE)
Poopup_refactor=function(dataset,vect_name,targetvar){
dataset2=dataset %>% select(lon,lat,vect_name,targetvar)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
print(dataset2)
dataset$poopup <- apply( dataset[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
vect_name=colnames(donnee)[c(1,2,3)]
targetvar=vect_name[3]
vect_name=colnames(donnee)[c(1,2,4)]
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
View(donnee2)
Poopup_refactor=function(dataset,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset %>% select(lon,lat,vect_name,targetvar)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
dataset$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
View(donnee2)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(lon,lat,vect_name,targetvar)
dataset2 <- Map(paste, names(dataset2), dataset2, sep = ':')
dataset$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
print(dataset2)
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(lon,lat,vect_name,targetvar)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(lon,lat,vect_name,targetvar)
dataset2 <- Map(paste, names(dataset2), dataset2, sep = ':')
print(dataset2)
dataset$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(lon,lat,vect_name,targetvar)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
print(dataset2)
dataset$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(lon,lat,vect_name,targetvar)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
dataset2$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset2 %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
View(donnee2)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(vect_name,targetvar)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
dataset2$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset2 %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(lon,lat,vect_name,targetvar)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
dataset_raw$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset_raw %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
View(donnee2)
donnee=read_csv('./DataViz.csv')
targetvar='prix'
vect_name=colnames(donnee)[c(1,2,4)]
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
Poopup_refactor=function(dataset_raw,vect_name,targetvar){
# Selection des variables pertinantes
dataset2=dataset_raw %>% select(vect_name)
dataset2[] <- Map(paste, names(dataset2), dataset2, sep = ':')
dataset_raw$poopup <- apply( dataset2[ , vect_name] , 1 , FUN= paste,collapse = "<br/>" )
newDs=dataset_raw %>% select(lon,lat,poopup,targetvar)
return(newDs)
}
donnee2=Poopup_refactor(donnee,vect_name,targetvar)
View(donnee2)
runApp('Shiny')
runApp('Shiny',port=1234)
runApp('Shiny',port=1234)
runApp('Shiny',port=1234)
